/*
 * motor.c
 *
 *  Created on: 2018/04/14
 *      Author: shts
 */
#include "iodefine.h"
#include "motor.h"
#include "serial.h"
#include "util.h"
#include "MTU.h"
#include "LED.h"

MOT r_motor, l_motor;
extern SPC spec;

void init_Motor(void) {
	r_motor.min_acc = 0.0;
	l_motor.min_acc = 0.0;
	r_motor.max_acc = 1500;
	l_motor.max_acc = 1500;
	r_motor.acc = 0.0;
	l_motor.acc = 0.0;

	r_motor.min_vel = 200.0;
	l_motor.min_vel = 200.0;
	r_motor.max_vel = 2000.0;
	l_motor.max_vel = 2000.0;
	r_motor.vel = 300.0;
	l_motor.vel = 300.0;

	r_motor.cnt = 0.0;
	l_motor.cnt = 0.0;

	r_motor.end_flag = 0.0;
	l_motor.end_flag = 0.0;
	r_motor.stop_flag = 0.0;
	l_motor.stop_flag = 0.0;

	r_motor.rot_dir_flag = 0;
	l_motor.rot_dir_flag = 1;

	r_motor.dist = 0.0;

	PE.DRL.BIT.B2 = 1; //reset (0 : off, 1 : on)
	PE.DRL.BIT.B3 = 0; //excitation_enable (1 : on, 0 : off)

	PE.DRL.BIT.B1 = 0; //R_CW/CCW(0 : forward, 1 : backward)
	PE.DRL.BIT.B5 = 1; //L_CW/CCW(1 : forward, 0 : backward)

	PE.DRL.BIT.B0 = 1; //R_Clock
	PE.DRL.BIT.B4 = 1; //L_Clock

	PE.DRL.BIT.B2 = 0; //reset(0 : off, 1 : on)
}

void drv_Motor(float dist, float t_vel, int t_acc, char rot_dir_flag,
		char end_flag, char ch) {
	/*
	 rot_dir
	 1 : forward
	 0 : backward
	 */

	if (t_acc > r_motor.max_acc) {
		t_acc = r_motor.max_acc;
	} else if (t_acc < r_motor.min_acc) {
		t_acc = r_motor.min_acc;
	}

	if (t_vel > r_motor.max_vel) {
		t_vel = r_motor.max_vel;
	} else if (t_vel < r_motor.min_vel) {
		t_vel = r_motor.min_vel;
	}

	PE.DRL.BIT.B2 = 1; //reset(0 : off, 1 : on)
	switch (ch) {
	case R_motor:
		r_motor.cnt = dist / spec.step_dist;
		r_motor.tar_vel = t_vel;
		r_motor.acc = t_acc;
		r_motor.rot_dir_flag = !rot_dir_flag; //R_CW/CCW(0 : forward, 1 : backward)
		PE.DRL.BIT.B1 = r_motor.rot_dir_flag;
		r_motor.end_flag = end_flag;
		r_motor.stop_flag = 0;
		break;
	case L_motor:
		l_motor.cnt = dist / spec.step_dist;
		l_motor.tar_vel = t_vel;
		l_motor.acc = t_acc;
		l_motor.rot_dir_flag = rot_dir_flag; //L_CW/CCW(1 : forward, 0 : backward)
		PE.DRL.BIT.B5 = l_motor.rot_dir_flag;
		l_motor.end_flag = end_flag;
		l_motor.stop_flag = 0;
		break;
	}
	PE.DRL.BIT.B2 = 0; //reset(0 : off, 1 : on)
}

void switch_Motor(char sw) {
	if (sw == on) {
		PE.DRL.BIT.B3 = 1;
	} else {
		PE.DRL.BIT.B3 = 0;
	}
}

void mot_app(float dist, float t_vel, int t_acc, char move_flag, char end_flag) {

	int decel_dist;
	decel_dist = (t_vel * t_vel - r_motor.min_vel * r_motor.min_vel)
			/ (2 * t_acc);
	if (move_flag == straight) {
		spec.cnt_ctl = 0;
	} else {
		spec.cnt_ctl = 1;
	}

	start_MTU(cst0);
	start_MTU(cst1);

	if (dist >= decel_dist) {
		drv_Motor(dist - decel_dist, t_vel, t_acc, move_flag & 1, end_flag,
				R_motor);
		drv_Motor(dist - decel_dist, t_vel, t_acc, (move_flag & 2) >> 1,
				end_flag, L_motor);
		while (1) {
			if (l_motor.stop_flag == 1 || r_motor.stop_flag == 1) {
				break;
			}
		}

		drv_Motor(decel_dist, r_motor.min_vel, t_acc, move_flag & 1, end_flag,
				R_motor);
		drv_Motor(decel_dist, l_motor.min_vel, t_acc, (move_flag & 2) >> 1,
				end_flag, L_motor);

		while (1) {
			if (l_motor.stop_flag == 1 || r_motor.stop_flag == 1) {
				break;
			}
		}
	} else {
		drv_Motor(dist, r_motor.min_vel, t_acc, move_flag & 1, end_flag,
				R_motor);
		drv_Motor(dist, l_motor.min_vel, t_acc, (move_flag & 2) >> 1, end_flag,
				L_motor);

		while (1) {
			if (l_motor.stop_flag == 1 || r_motor.stop_flag == 1) {
				break;
			}
		}
	}
	stop_MTU(cst0);
	stop_MTU(cst1);

	spec.cnt_ctl = 0;
}

void mot_app2(float dist, float t_vel, int t_acc, char move_flag, char end_flag) {

	if (move_flag == straight) {
		spec.cnt_ctl = 0;
	} else {
		spec.cnt_ctl = 1;
	}

	start_MTU(cst0);
	start_MTU(cst1);

	drv_Motor(dist, t_vel, t_acc, move_flag & 1, end_flag, R_motor);
	drv_Motor(dist, t_vel, t_acc, (move_flag & 2) >> 1, end_flag, L_motor);

	while (1) {
		if (l_motor.stop_flag == 1 || r_motor.stop_flag == 1) {
			break;
		}
	}
	spec.cnt_ctl = 0;
}

void mot_sla_app(float dist, float t_vel, float theta, float omega, int t_acc,
		char end_flag) {
	float dist_l = dist + (theta * 3.141592 / 180.0) * spec.tread / 2;
	float vel_l = t_vel + (omega * 3.141592 / 180.0) * spec.tread / 2;
	float dist_r = dist - (theta * 3.141592 / 180.0) * spec.tread / 2;
	float vel_r = t_vel - (omega * 3.141592 / 180.0) * spec.tread / 2;
	char rot_l, rot_r;
	spec.cnt_ctl = 2;

	if (vel_l < 0) {
		rot_l = 0;
	} else {
		rot_l = 1;
	}

	if (vel_r < 0) {
		rot_r = 0;
	} else {
		rot_r = 1;
	}

	drv_Motor(dist_r, vel_r, t_acc, rot_r, end_flag, R_motor);
	drv_Motor(dist_l, vel_l, t_acc, rot_l, end_flag, L_motor);

	start_MTU(cst0);
	start_MTU(cst1);

	while (1) {
		if (l_motor.stop_flag == 1 || r_motor.stop_flag == 1) {
			break;
		}
	}
	stop_MTU(cst0);
	stop_MTU(cst1);
	spec.cnt_ctl = 0;
}

void move_test() {
	mot_sla_app(180, 300, 90, 200, 1500, on);
}

void move_Left() {
	spec.kp_r -= 0.1;
	spec.kp_l -= 0.1;
	mot_app(spec.half_block, 330, 1700, straight, on);
	wait_ms(100);
	switch_Motor(off);
	wait_ms(200);
	switch_Motor(on);
	wait_ms(100);
	mot_app(spec.l_distance, 250, 1700, left, on);
	wait_ms(100);
	switch_Motor(off);
	wait_ms(200);
	switch_Motor(on);
	wait_ms(100);
	mot_app2(spec.half_block, 330, 1700, straight, on);
	spec.kp_r += 0.1;
	spec.kp_l += 0.1;
}

void move_Right() {
	spec.kp_r -= 0.1;
	spec.kp_l -= 0.1;
	mot_app(spec.half_block, 330, 1700, straight, on);
	wait_ms(100);
	switch_Motor(off);
	wait_ms(200);
	switch_Motor(on);
	wait_ms(100);
	mot_app(spec.r_distance, 250, 1700, right, on);
	wait_ms(10);
	switch_Motor(off);
	wait_ms(200);
	switch_Motor(on);
	wait_ms(100);
	mot_app2(spec.half_block, 330, 1700, straight, on);
	spec.kp_r += 0.1;
	spec.kp_l += 0.1;
}

void move_Forward() {
	spec.kp_r += 0.1;
	spec.kp_l += 0.1;
	mot_app2(spec.full_block, 330, 1700, straight, on);
	spec.kp_r -= 0.1;
	spec.kp_l -= 0.1;
}

void move_Backward() {
	mot_app(spec.half_block, 330, 1700, straight, on);
	wait_ms(100);
	switch_Motor(off);
	wait_ms(290);
	switch_Motor(on);
	wait_ms(100);
	mot_app(spec.r_distance * 2, 250, 1700, right, on);
	wait_ms(10);
	switch_Motor(off);
	wait_ms(200);
	switch_Motor(on);
	wait_ms(100);
	mot_app(spec.half_block, 250, 1700, back, on);
	wait_ms(100);
	switch_Motor(off);
	wait_ms(200);
	switch_Motor(on);
	wait_ms(200);
	mot_app2(30 + spec.half_block, 330, 1700, straight, on);
}

void move_Backward_2() {
	mot_app(spec.half_block, 330, 1700, straight, on);
	wait_ms(100);
	switch_Motor(off);
	wait_ms(200);
	switch_Motor(on);
	wait_ms(100);
	mot_app(spec.r_distance * 2, 250, 1700, right, on);
	wait_ms(100);
	switch_Motor(off);
	wait_ms(200);
	switch_Motor(on);
	wait_ms(100);
	mot_app2(spec.half_block, 330, 1700, straight, on);
}
